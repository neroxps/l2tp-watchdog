name: Build OpenWrt Package

on:
  # push:
  #   branches:
  #     - main
  #   tags:
  #     - 'v*'
  # pull_request:
  #   branches:
  #     - main
  workflow_dispatch:
    inputs:
      arch:
        description: 'Target architecture to build'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - x86_64
        - mt7628
        - x86_64_21.02.1

# When triggering this workflow manually, select the architecture you want to build.
# The workflow will create separate jobs for each architecture in the matrix.
# If you select a specific architecture, only that job will run.

jobs:
  build:
    name: Build for ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: x86_64
            target: x86/64
            sdk_url: https://archive.openwrt.org/chaos_calmer/15.05.1/x86/64/OpenWrt-SDK-15.05.1-x86-64_gcc-4.8-linaro_uClibc-0.9.33.2.Linux-x86_64.tar.bz2
          - arch: mt7628
            target: ramips/mt7628
            sdk_url: https://archive.openwrt.org/chaos_calmer/15.05.1/ramips/mt7628/OpenWrt-SDK-15.05.1-ramips-mt7628_gcc-4.8-linaro_uClibc-0.9.33.2.Linux-x86_64.tar.bz2
          - arch: x86_64_21.02.1
            target: x86/64
            sdk_url: https://mirror-03.infra.openwrt.org/releases/21.02.1/targets/x86/64/openwrt-sdk-21.02.1-x86-64_gcc-8.4.0_musl.Linux-x86_64.tar.xz

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup OpenWrt SDK
        run: |
          # Use the SDK URL from matrix
          SDK_URL="${{ matrix.sdk_url }}"
          wget $SDK_URL
          # Get the downloaded file name
          DOWNLOADED_FILE=$(ls OpenWrt-SDK-*)
          # Extract based on file extension
          if [[ $SDK_URL == *.tar.bz2 ]]; then
            tar -xjf $DOWNLOADED_FILE
          elif [[ $SDK_URL == *.tar.xz ]]; then
            tar -xJf $DOWNLOADED_FILE
          else
            tar -xf $DOWNLOADED_FILE
          fi
          mv openwrt-sdk-* openwrt-sdk
          echo "SDK_ROOT=$(pwd)/openwrt-sdk" >> $GITHUB_ENV

      - name: Prepare Package
        run: |
          # Create package directory
          mkdir -p ${{ env.SDK_ROOT }}/package/luci-app-l2tp-watchdog
          # Copy package files
          cp -r $(pwd)/* ${{ env.SDK_ROOT }}/package/luci-app-l2tp-watchdog/
          # Remove SDK directory from copied files
          rm -rf ${{ env.SDK_ROOT }}/package/luci-app-l2tp-watchdog/openwrt-sdk

      - name: Update and Install Feeds
        run: |
          cd ${{ env.SDK_ROOT }}
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Configure Package
        run: |
          cd ${{ env.SDK_ROOT }}
          # Enable the package in config
          echo "CONFIG_PACKAGE_luci-app-l2tp-watchdog=m" >> .config
          # Use defconfig to resolve dependencies
          make defconfig

      - name: Compile Package
        run: |
          cd ${{ env.SDK_ROOT }}
          # Compile only our package
          make package/luci-app-l2tp-watchdog/compile V=s

      - name: Collect IPK Files
        run: |
          cd ${{ env.SDK_ROOT }}
          # Find and copy IPK files
          find bin/packages -name "*l2tp-watchdog*.ipk" -exec cp {} $(pwd)/ \;
          ls -la *.ipk

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: luci-app-l2tp-watchdog-${{ matrix.arch }}
          path: ${{ env.SDK_ROOT }}/*.ipk

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Upload all IPK files
          for artifact_dir in luci-app-l2tp-watchdog-*; do
            if [ -d "$artifact_dir" ]; then
              for ipk_file in "$artifact_dir"/*.ipk; do
                if [ -f "$ipk_file" ]; then
                  asset_name=$(basename "$ipk_file")
                  upload_url=$(echo "${{ steps.create_release.outputs.upload_url }}" | sed "s/{?name,label}/?name=${asset_name}/")
                  curl -X POST \
                    -H "Authorization: token $GITHUB_TOKEN" \
                    -H "Content-Type: application/octet-stream" \
                    --data-binary @"$ipk_file" \
                    "$upload_url"
                fi
              done
            fi
          done
